// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../ts/typings/hybrids.d.ts

declare module 'ue-elems' {
    export * from 'ue-elems/elem';
}

declare module 'ue-elems/elem' {
    import UeText from 'ue-elems/elem/ue-text';
    import UeButton from 'ue-elems/elem/ue-button';
    import UeButtonGrp from 'ue-elems/elem/ue-button-grp';
    import UeSlider from 'ue-elems/elem/ue-slider';
    import UeSliderGrp from 'ue-elems/elem/ue-slider-grp';
    import UeSliderWidget from 'ue-elems/elem/ue-slider-widget';
    import UeIcon from 'ue-elems/elem/ue-icon';
    export { UeButton, UeButtonGrp, UeIcon, UeSlider, UeSliderGrp, UeSliderWidget, UeText };
}

declare module 'ue-elems/elem/ue-text' {
    import { Hybrid, PropertyDescriptor, Properties } from 'hybrids';
    interface UeTextProps extends Properties {
        slotHTML?: PropertyDescriptor<string, UeTextProps>;
    }
    const _default: Hybrid<UeTextProps>;
    export default _default;
}

declare module 'ue-elems/elem/ue-button' {
    import { Hybrid, PropertyDescriptor, Properties } from 'hybrids';
    interface UeButtonProps extends Properties {
        label: PropertyDescriptor<string, UeButtonProps>;
        active: boolean;
        checkable: boolean;
        checked: boolean;
        disabled: boolean;
        focused: boolean;
    }
    const _default: Hybrid<UeButtonProps>;
    export default _default;
}

declare module 'ue-elems/elem/ue-button-grp' {
    import { Hybrid, Properties } from 'hybrids';
    export interface UeButtonGrpProps extends Properties {
        buttons?: {
            label?: string;
            checked?: boolean;
            disabled?: boolean;
        }[];
        left?: boolean;
    }
    const _default: Hybrid<UeButtonGrpProps>;
    export default _default;
}

declare module 'ue-elems/elem/ue-slider' {
    import { Properties, PropertyDescriptor, Hybrid } from 'hybrids';
    export interface UeSliderProps extends Properties {
        min?: number;
        max?: number;
        step?: number;
        value?: PropertyDescriptor<number, UeSliderProps>;
    }
    const _default: Hybrid<UeSliderProps>;
    export default _default;
}

declare module 'ue-elems/elem/ue-slider-grp' {
    const _default: {
        name: string;
        data: any[];
        render: import("hybrids").RenderCallback<import("hybrids").Properties>;
    };
    export default _default;
}

declare module 'ue-elems/elem/ue-slider-widget' {
    const UeSliderWidget: {
        label: string;
        min: number;
        max: number;
        step: number;
        value: number;
        defaultValue: number;
        render: import("hybrids").RenderCallback<import("hybrids").Properties>;
    };
    export default UeSliderWidget;
}

declare module 'ue-elems/elem/ue-icon' {
    import { Properties, Hybrid } from 'hybrids';
    const shapeUrls: {
        circle: string;
    };
    const sizes: {
        small: number;
        medium: number;
        large: number;
        xlarge: number;
    };
    interface UeIconProps extends Properties {
        border: number;
        shape: keyof typeof shapeUrls;
        size: keyof typeof sizes;
    }
    const _default: Hybrid<UeIconProps>;
    export default _default;
}

